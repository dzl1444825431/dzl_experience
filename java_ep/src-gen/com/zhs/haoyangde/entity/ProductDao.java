package com.zhs.haoyangde.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zhs.haoyangde.entity.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT.
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Product_id = new Property(0, long.class, "product_id", true, "PRODUCT_ID");
        public final static Property Product_number = new Property(1, int.class, "product_number", false, "PRODUCT_NUMBER");
        public final static Property Product_price_db = new Property(2, Double.class, "product_price_db", false, "PRODUCT_PRICE_DB");
    };


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCT' (" + //
                "'PRODUCT_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: product_id
                "'PRODUCT_NUMBER' INTEGER NOT NULL ," + // 1: product_number
                "'PRODUCT_PRICE_DB' REAL);"); // 2: product_price_db
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getProduct_id());
        stmt.bindLong(2, entity.getProduct_number());
 
        Double product_price_db = entity.getProduct_price_db();
        if (product_price_db != null) {
            stmt.bindDouble(3, product_price_db);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.getLong(offset + 0), // product_id
            cursor.getInt(offset + 1), // product_number
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2) // product_price_db
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setProduct_id(cursor.getLong(offset + 0));
        entity.setProduct_number(cursor.getInt(offset + 1));
        entity.setProduct_price_db(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setProduct_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getProduct_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
