package com.zhs.haoyangde.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zhs.haoyangde.entity.Location;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOCATION.
*/
public class LocationDao extends AbstractDao<Location, Integer> {

    public static final String TABLENAME = "LOCATION";

    /**
     * Properties of entity Location.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Area_id_db = new Property(0, Integer.class, "area_id_db", true, "AREA_ID_DB");
        public final static Property Area_id = new Property(1, Integer.class, "area_id", false, "AREA_ID");
        public final static Property Store_id = new Property(2, Integer.class, "store_id", false, "STORE_ID");
        public final static Property Contact_province = new Property(3, String.class, "contact_province", false, "CONTACT_PROVINCE");
        public final static Property Contact_city = new Property(4, String.class, "contact_city", false, "CONTACT_CITY");
        public final static Property Contact_district = new Property(5, String.class, "contact_district", false, "CONTACT_DISTRICT");
        public final static Property Distance = new Property(6, String.class, "distance", false, "DISTANCE");
        public final static Property Area_name = new Property(7, String.class, "area_name", false, "AREA_NAME");
        public final static Property Store_name = new Property(8, String.class, "store_name", false, "STORE_NAME");
        public final static Property State = new Property(9, Integer.class, "state", false, "STATE");
    };


    public LocationDao(DaoConfig config) {
        super(config);
    }
    
    public LocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOCATION' (" + //
                "'AREA_ID_DB' INTEGER PRIMARY KEY ," + // 0: area_id_db
                "'AREA_ID' INTEGER," + // 1: area_id
                "'STORE_ID' INTEGER," + // 2: store_id
                "'CONTACT_PROVINCE' TEXT," + // 3: contact_province
                "'CONTACT_CITY' TEXT," + // 4: contact_city
                "'CONTACT_DISTRICT' TEXT," + // 5: contact_district
                "'DISTANCE' TEXT," + // 6: distance
                "'AREA_NAME' TEXT," + // 7: area_name
                "'STORE_NAME' TEXT," + // 8: store_name
                "'STATE' INTEGER);"); // 9: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOCATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Location entity) {
        stmt.clearBindings();
 
        Integer area_id_db = entity.getArea_id_db();
        if (area_id_db != null) {
            stmt.bindLong(1, area_id_db);
        }
 
        Integer area_id = entity.getArea_id();
        if (area_id != null) {
            stmt.bindLong(2, area_id);
        }
 
        Integer store_id = entity.getStore_id();
        if (store_id != null) {
            stmt.bindLong(3, store_id);
        }
 
        String contact_province = entity.getContact_province();
        if (contact_province != null) {
            stmt.bindString(4, contact_province);
        }
 
        String contact_city = entity.getContact_city();
        if (contact_city != null) {
            stmt.bindString(5, contact_city);
        }
 
        String contact_district = entity.getContact_district();
        if (contact_district != null) {
            stmt.bindString(6, contact_district);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(7, distance);
        }
 
        String area_name = entity.getArea_name();
        if (area_name != null) {
            stmt.bindString(8, area_name);
        }
 
        String store_name = entity.getStore_name();
        if (store_name != null) {
            stmt.bindString(9, store_name);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(10, state);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Location readEntity(Cursor cursor, int offset) {
        Location entity = new Location( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // area_id_db
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // area_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // store_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contact_province
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contact_city
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contact_district
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // distance
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // area_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // store_name
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // state
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Location entity, int offset) {
        entity.setArea_id_db(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setArea_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setStore_id(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setContact_province(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContact_city(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContact_district(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDistance(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setArea_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStore_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setState(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(Location entity, long rowId) {
        return entity.getArea_id_db();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(Location entity) {
        if(entity != null) {
            return entity.getArea_id_db();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
